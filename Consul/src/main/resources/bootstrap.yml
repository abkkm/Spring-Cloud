spring:
  profiles:    active: dev
  application:
    name: testConsulApp
  cloud:
    consul:
      #Donde encontrar Consul
      host: localhost
      port: 8500
      discovery:
        #Cada cuanto tiempo checkear los cambios en Consul
        catalog-services-watch-delay: 1000
        catalog-services-watch-timeout: 1000
        # Especificamos tags
        tags:        - prop1=valor2
        - nombre=prueba
        #
        #Health
        #
        register-health-check: true    
        #health-check-path: ${management.server.servlet.context-path}/health
        health-check-path: /my-health-check
        healthCheckInterval: 5s
        hostname: 10.0.75.1
        #
        # Registro del servicio
        #
        #Habilita el discovery
        enabled: true
        #Habilita el registro
        register: true
        #Id de la instancia del servicio. Tiene que ser unico. Por defecto lo crea usando el service-name concatenado con el puerto
        #instance-id: ${spring.application.name}
        #Nombre del servicio. Cuando queramos invocar al servicio es el nombre logico que tenemos que poner en la uri
        #service-name: mi-prefijo-${spring.application.name}
     
# Configurar Actuator
management:
  # Esto hace que en Consul se registre un segundo servicio. El Mise quedaria reflejado en dos servicios, uno que actua como el
  # propio MiSe y otro que hace las veces de gestion - health,..
  #server:
  #  port: 4452
  endpoints:
    web:
      exposure:
        exclude:
        include: health
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
logging:
  file: milog.txt
info:
  tags:
    environment: actuator-prueba
  app:
    name: consul-client
    description: Ejemplo de cliente consul
    version: 1.0.0            